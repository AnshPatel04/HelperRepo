https://drive.google.com/file/d/1d8OUOQv8qDYkxw-5z5GVSVDC2unIUXV4/view


https://widgetwisdom.com/adding-admob-ads-to-a-flutter-app/


///----------services/firestore_service.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:advertising_id/advertising_id.dart';

class FirestoreService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  static Future<String> getAdvertisingId() async {
    return await AdvertisingId.id(true) ?? '';
  }

  static Future<void> createUserIfNew() async {
    String adId = await getAdvertisingId();
    DocumentReference userRef = _firestore.collection('users').doc(adId);

    DocumentSnapshot doc = await userRef.get();
    if (!doc.exists) {
      await userRef.set({
        'advertising_id': adId,
        'credits': 100,
      });
      print(':::: New user created with 100 credits. ::::');
    } else {
      print(':::: User already exists. ::::');
    }
  }
}

///-- user 2
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:advertising_id/advertising_id.dart';

class FirestoreService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Get advertising ID
  static Future<String> getAdvertisingId() async {
    return await AdvertisingId.id(true) ?? '';
  }

  // Create user with default credits if not exists
  static Future<void> createUserIfNew() async {
    String adId = await getAdvertisingId();
    DocumentReference userRef = _firestore.collection('users').doc(adId);

    DocumentSnapshot doc = await userRef.get();

    if (!doc.exists) {
      await userRef.set({
        'credits': 100,
        'createdAt': FieldValue.serverTimestamp(), // optional
      });
      print('✅ New user created with 100 credits.');
    } else {
      print('✅ User already exists.');
    }
  }

  // Optional: Get current user credits
  static Future<int?> getUserCredits() async {
    String adId = await getAdvertisingId();
    DocumentSnapshot doc = await _firestore.collection('users').doc(adId).get();
    return doc.exists ? (doc['credits'] as int?) : null;
  }
}



///----------services/ad_service.dart
import 'package:flutter/material.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';

class AdService {
  static InterstitialAd? _interstitialAd;

  static void loadInterstitialAd(String adUnitId) {
    InterstitialAd.load(
      adUnitId: adUnitId,
      request: const AdRequest(),
      adLoadCallback: InterstitialAdLoadCallback(
        onAdLoaded: (ad) => _interstitialAd = ad,
        onAdFailedToLoad: (error) => print(':::: Interstitial Ad Load Failed: $error ::::'),
      ),
    );
  }

  static Future<void> showAdWithLoader(BuildContext context) async {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (_) => const Center(child: CircularProgressIndicator()),
    );

    await Future.delayed(const Duration(seconds: 1));
    if (_interstitialAd != null) {
      _interstitialAd!.show();
      _interstitialAd = null;
      await Future.delayed(const Duration(seconds: 1));
      Navigator.of(context).pop(); // remove loader
    } else {
      Navigator.of(context).pop(); // remove loader
    }
  }
}


///-------screens/splash_screen.dart

import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../DAL/FirebaseRemoteConfigService.dart';
import 'introduction_screen1.dart';
import 'home_screen.dart';

class SplashVideoScreen extends StatefulWidget {
  @override
  _SplashVideoScreenState createState() => _SplashVideoScreenState();
}

class _SplashVideoScreenState extends State<SplashVideoScreen> {
  late VideoPlayerController _controller;
  InterstitialAd? interstitialAd;
  bool isAdShown = false;

  @override
  void initState() {
    super.initState();
    _loadInterstitialAd();

    _controller = VideoPlayerController.asset('assets/splash/splash_bg_video2.mp4')
      ..initialize().then((_) {
        setState(() {});
        _controller.play();
        _controller.addListener(() async {
          if (!isAdShown && _controller.value.position >= _controller.value.duration) {
            isAdShown = true;
            _showInterstitialAdThenNavigate();
          }
        });
      });
  }

  void _loadInterstitialAd() {
    InterstitialAd.load(
      adUnitId: fireAccess['interPreLoad'].toString(), // OR use test ID
      request: AdRequest(),
      adLoadCallback: InterstitialAdLoadCallback(
        onAdLoaded: (ad) {
          interstitialAd = ad;
        },
        onAdFailedToLoad: (error) {
          print('Ad failed: $error');
          interstitialAd = null;
        },
      ),
    );
  }

  Future<bool> isFirstTime() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return prefs.getBool('isNotFirstTime') ?? false;
  }

  Future<void> _showInterstitialAdThenNavigate() async {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (_) => const Center(child: CircularProgressIndicator()),
    );

    await Future.delayed(Duration(milliseconds: 500)); // Just smooth loader feel

    if (interstitialAd != null) {
      interstitialAd!.fullScreenContentCallback = FullScreenContentCallback(
        onAdDismissedFullScreenContent: (ad) async {
          Navigator.of(context).pop(); // Close loader
          _navigateNext();
        },
        onAdFailedToShowFullScreenContent: (ad, error) {
          Navigator.of(context).pop(); // Close loader
          _navigateNext();
        },
      );

      interstitialAd!.show();
    } else {
      Navigator.of(context).pop(); // Close loader
      _navigateNext();
    }
  }

  Future<void> _navigateNext() async {
    bool page = await isFirstTime();
    if (mounted) {
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
          builder: (context) => page ? HomeScreen() : IntroductionScreen1(),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _controller.value.isInitialized
          ? SizedBox.expand(
              child: FittedBox(
                fit: BoxFit.cover,
                child: SizedBox(
                  width: _controller.value.size.width,
                  height: _controller.value.size.height,
                  child: VideoPlayer(_controller),
                ),
              ),
            )
          : const Center(child: CircularProgressIndicator()),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    interstitialAd?.dispose();
    super.dispose();
  }
}
